{"version":3,"file":"amd.min.js","sources":["../../src/err-msg.js","../../src/extras/amd.js"],"sourcesContent":["export function errMsg(errCode, msg) {\r\n  if (process.env.SYSTEM_PRODUCTION)\r\n    return (msg || \"\") + \" (SystemJS https://git.io/JvFET#\" + errCode + \")\";\r\n  else\r\n    return (msg || \"\") + \" (SystemJS Error#\" + errCode + \" \" + \"https://git.io/JvFET#\" + errCode + \")\";\r\n}","import { errMsg } from '../err-msg.js';\r\n\r\n/*\r\n * Support for AMD loading\r\n */\r\n(function (global) {\r\n  function unsupportedRequire () {\r\n    throw Error(process.env.SYSTEM_PRODUCTION ? errMsg(5) : errMsg(5, 'AMD require not supported.'));\r\n  }\r\n\r\n  var requireExportsModule = ['require', 'exports', 'module'];\r\n\r\n  function createAMDRegister (amdDefineDeps, amdDefineExec) {\r\n    var exports = {};\r\n    var module = { exports: exports };\r\n    var depModules = [];\r\n    var setters = [];\r\n    var splice = 0;\r\n    for (var i = 0; i < amdDefineDeps.length; i++) {\r\n      var id = amdDefineDeps[i];\r\n      var index = setters.length;\r\n      if (id === 'require') {\r\n        depModules[i] = unsupportedRequire;\r\n        splice++;\r\n      }\r\n      else if (id === 'module') {\r\n        depModules[i] = module;\r\n        splice++;\r\n      }\r\n      else if (id === 'exports') {\r\n        depModules[i] = exports;\r\n        splice++;\r\n      }\r\n      else {\r\n        createSetter(i);\r\n      }\r\n      if (splice)\r\n        amdDefineDeps[index] = id;\r\n    }\r\n    if (splice)\r\n      amdDefineDeps.length -= splice;\r\n    var amdExec = amdDefineExec;\r\n    return [amdDefineDeps, function (_export) {\r\n      _export({ default: exports, __useDefault: true });\r\n      return {\r\n        setters: setters,\r\n        execute: function () {\r\n          var amdResult = amdExec.apply(exports, depModules);\r\n          if (amdResult !== undefined)\r\n            module.exports = amdResult;\r\n          _export(module.exports);\r\n          _export('default', module.exports);\r\n        }\r\n      };\r\n    }];\r\n\r\n    // needed to avoid iteration scope issues\r\n    function createSetter(idx) {\r\n      setters.push(function (ns) {\r\n        depModules[idx] = ns.__useDefault ? ns.default : ns;\r\n      });\r\n    }\r\n  }\r\n\r\n  global.pentaDefine = function (arg1, arg2, arg3) {\r\n    var isNamedRegister = typeof arg1 === 'string';\r\n    var name = isNamedRegister ? arg1 : null;\r\n    var depArg = isNamedRegister ? arg2 : arg1;\r\n    var execArg = isNamedRegister ? arg3 : arg2;\r\n\r\n    // The System.register(deps, exec) arguments\r\n    var deps, exec;\r\n\r\n    // define([], function () {})\r\n    if (Array.isArray(depArg)) {\r\n      deps = depArg;\r\n      exec = execArg;\r\n    }\r\n    // define({})\r\n    else if (typeof depArg === 'object') {\r\n      deps = [];\r\n      exec = function () { return depArg };\r\n    }\r\n    // define(function () {})\r\n    else if (typeof depArg === 'function') {\r\n      deps = requireExportsModule;\r\n      exec = depArg;\r\n    } else {\r\n      throw Error(process.env.SYSTEM_PRODUCTION ? errMsg(9) : errMsg(9, 'Invalid call to AMD define()'));\r\n    }\r\n\r\n    var amdRegister = createAMDRegister(deps, exec);\r\n\r\n    if (isNamedRegister) {\r\n      if (PentaSystem.registerRegistry) {\r\n        PentaSystem.registerRegistry[name] = amdRegister;\r\n        PentaSystem.register(name, amdRegister[0], amdRegister[1]);\r\n      } else\r\n        console.warn(process.env.SYSTEM_PRODUCTION ? errMsg('W6') : errMsg('W6', 'Include named-register.js for full named define support'));\r\n        // TODO: create new warning number and documentation for using named define without named-register extra\r\n        PentaSystem.register(amdRegister[0], amdRegister[1]);\r\n    } else\r\n      PentaSystem.register(amdRegister[0], amdRegister[1]);\r\n  };\r\n  global.pentaDefine.amd = {};\r\n})(typeof self !== 'undefined' ? self : global);\r\n"],"names":["errMsg","errCode","msg","global","unsupportedRequire","Error","requireExportsModule","pentaDefine","arg1","arg2","arg3","deps","exec","isNamedRegister","name","depArg","execArg","Array","isArray","amdRegister","amdDefineDeps","amdDefineExec","createSetter","idx","setters","push","ns","depModules","__useDefault","default","exports","module","splice","i","length","id","index","amdExec","_export","execute","amdResult","apply","undefined","createAMDRegister","PentaSystem","registerRegistry","register","console","warn","amd","self"],"mappings":"CAAO,WAAA,SAASA,EAAOC,EAASC,GAE5B,OAAQA,GAAO,IAAM,mCAAqCD,EAAU,KCGxE,SAAWE,GACT,SAASC,IACP,MAAMC,MAAsCL,EAAO,IAGrD,IAAIM,EAAuB,CAAC,UAAW,UAAW,UAsDlDH,EAAOI,YAAc,SAAUC,EAAMC,EAAMC,GACzC,IAMIC,EAAMC,EANNC,EAAkC,iBAATL,EACzBM,EAAOD,EAAkBL,EAAO,KAChCO,EAASF,EAAkBJ,EAAOD,EAClCQ,EAAUH,EAAkBH,EAAOD,EAMvC,GAAIQ,MAAMC,QAAQH,GAChBJ,EAAOI,EACPH,EAAOI,OAGJ,GAAsB,iBAAXD,EACdJ,EAAO,GACPC,EAAO,WAAc,OAAOG,OAGzB,CAAA,GAAsB,mBAAXA,EAId,MAAMV,MAAsCL,EAAO,IAHnDW,EAAOL,EACPM,EAAOG,EAKT,IAAII,EA/EN,SAA4BC,EAAeC,GA6CzC,SAASC,EAAaC,GACpBC,EAAQC,MAAK,SAAUC,GACrBC,EAAWJ,GAAOG,EAAGE,aAAeF,EAAGG,QAAUH,KAzCrD,IALA,IAAII,EAAU,GACVC,EAAS,CAAED,QAASA,GACpBH,EAAa,GACbH,EAAU,GACVQ,EAAS,EACJC,EAAI,EAAOb,EAAcc,OAAlBD,EAA0BA,IAAK,CAC7C,IAAIE,EAAKf,EAAca,GACnBG,EAAQZ,EAAQU,OACT,YAAPC,GACFR,EAAWM,GAAK7B,EAChB4B,KAEc,WAAPG,GACPR,EAAWM,GAAKF,EAChBC,KAEc,YAAPG,GACPR,EAAWM,GAAKH,EAChBE,KAGAV,EAAaW,GAEXD,IACFZ,EAAcgB,GAASD,GAEvBH,IACFZ,EAAcc,QAAUF,GAC1B,IAAIK,EAAUhB,EACd,MAAO,CAACD,EAAe,SAAUkB,GAE/B,OADAA,EAAQ,CAAET,QAASC,EAASF,cAAc,IACnC,CACLJ,QAASA,EACTe,QAAS,WACP,IAAIC,EAAYH,EAAQI,MAAMX,EAASH,QACrBe,IAAdF,IACFT,EAAOD,QAAUU,GACnBF,EAAQP,EAAOD,SACfQ,EAAQ,UAAWP,EAAOD,aAwCda,CAAkBhC,EAAMC,GAEtCC,GACE+B,YAAYC,kBACdD,YAAYC,iBAAiB/B,GAAQK,EACrCyB,YAAYE,SAAShC,EAAMK,EAAY,GAAIA,EAAY,KAEvD4B,QAAQC,KAAqChD,EAAO,OAEpD4C,YAAYE,SAAS3B,EAAY,GAAIA,EAAY,KAEnDyB,YAAYE,SAAS3B,EAAY,GAAIA,EAAY,KAErDhB,EAAOI,YAAY0C,IAAM,GAnG3B,CAoGmB,oBAATC,KAAuBA,KAAO/C,QDzGjC"}